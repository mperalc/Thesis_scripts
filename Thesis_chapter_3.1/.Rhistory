seqnames.field = "X1",start.field = "X2",end.field = "X3")
png(
paste('/Users/Marta/Documents/WTCHG/DPhil/Data/Regulation/atac-seq/Re-processed_Aug2018/QC/covplot_iPSC_Neo1.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 11
)
covplot(peaks_cp,weightCol = "X5",title = paste("ATAC-seq peaks for iPSC SBneo1.1 over chromosomes"))
dev.off()
# Number of peaks out of Kundaje pipeline
freq(narrowPeaks$sampid)
# Number of non-overlapping peaks
freq(reduced_peaks$sampid)
# Merge peaks within sample and stage
narrowPeaks_subset = narrowPeaks[c(1:3,5,11:12)]
colnames(narrowPeaks_subset) = c("chr","start","end","score","sampid","names")
reduced_peaks = list()
reduced_peaks_df = list()
for (s in stages) {
reduced_peaks[[s]] = makeGRangesFromDataFrame(narrowPeaks_subset[narrowPeaks_subset$sampid == s,], keep.extra.columns = T)
reduced_peaks[[s]] = reduce(reduced_peaks[[s]])
reduced_peaks_df[[s]] = as.data.frame(reduced_peaks[[s]])
reduced_peaks_df[[s]]$sampid = rep(s,nrow(reduced_peaks_df[[s]]))
reduced_peaks_df[[s]]$names= paste(reduced_peaks_df[[s]]$seqnames,
reduced_peaks_df[[s]]$start,
reduced_peaks_df[[s]]$end, sep="_")
}
# rbind for plotting
reduced_peaks = do.call('rbind', reduced_peaks_df)
# Number of non-overlapping peaks
freq(reduced_peaks$sampid)
view(dfSummary(reduced_peaks, plain.ascii = FALSE, style = "grid",
graph.magnif = 0.75, valid.col = FALSE,
tmp.img.dir = "../QC"))
?aggregate
aggregate(reduced_peaks,by = sampid, FUN=mean)
aggregate(reduced_peaks,by = 'sampid', FUN=mean)
aggregate(sampid, reduced_peaks, sum)
aggregate(reduced_peaks$sampid, sum)
table(reduced_peaks$sampid)
mean(table(reduced_peaks$sampid))
sd(table(reduced_peaks$sampid))
# Calculate TSS enrichment in IDR peaks
library(readr)
library(summarytools)
library(ggplot2)
library(grid)
library(gridExtra)
library(GenomicRanges)
library(ChIPseeker)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
basedir = "/Users/Marta/Documents/WTCHG/DPhil/Data/Regulation/atac-seq/Re-processed_Aug2018/IDR_peaks/"
stages <- c("iPSC","DE","GT","PF","PE","EP","EN","BLC")
peaks = list()
for (s in stages) {
peaks[[s]] = read_tsv(paste0(basedir,s,".conservative_peak.narrowPeak"),col_names = F,skip = 1)
peaks[[s]]$sampid = rep(s,nrow(peaks[[s]]))
peaks[[s]]$names= paste(peaks[[s]]$X1,peaks[[s]]$X2,peaks[[s]]$X3, sep="_")
}
peaks_df = do.call('rbind', peaks)
# Merge  peaks within stage to remove overlapping with different summits
peaks_subset = peaks_df[c(1:3,11:12)]
colnames(peaks_subset) = c("chr","start","end","sampid","names")
reduced_peaks = list()
for (s in stages) {
reduced_peaks[[s]] = makeGRangesFromDataFrame(peaks_subset[peaks_subset$sampid ==s,])
reduced_peaks[[s]] = reduce(reduced_peaks[[s]])
reduced_peaks[[s]] = as.data.frame(reduced_peaks[[s]])
reduced_peaks[[s]]$sampid = rep(s,nrow(reduced_peaks[[s]]))
reduced_peaks[[s]]$names= paste(reduced_peaks[[s]]$seqnames,
reduced_peaks[[s]]$start,
reduced_peaks[[s]]$end, sep="_")
}
reduced_peaks = do.call('rbind', reduced_peaks)
# Number of non-overlapping peaks WITHIN SAME STAGE
#
freq(reduced_peaks$sampid)
# After merging among stages with bedtools and gathering counts with featureCounts, I get the combined (consensus) set of peaks
basedir = "/Users/Marta/Documents/WTCHG/DPhil/Data/Regulation/atac-seq/Re-processed_Aug2018/"
consensus = read_tsv(paste0(basedir,"binary_conservative_normalQuality_narrowpeaks.bed"),col_names = T)
head(consensus)
sum(consensus$iPSC)
table(consensus[c(5:12)])
colSums(consensus[c(5:12)])
# Number of non-overlapping peaks WITHIN SAME STAGE
#
freq(reduced_peaks$sampid)
mean(colSums(consensus[c(5:12)]))
head(consensus)
library(upsetR)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
install.packages("upsetR")
install.packages("UpSetR")
library(UpSetR)
install.packages("Rcpp")
library(UpSetR)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
# Unique per stage
upset(consensus[c(5:12)])
# Unique per stage
upset(consensus[,c(5:12)])
consensus[,c(5:12)]
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]))
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq")
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8)
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 0.75))
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 1))
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 1.5))
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 1.5),
sets = stages)
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 1.5),
sets = stages, keep.order = TRUE)
rev(stages)
# Unique per stage
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 1.5),
sets = rev(stages), keep.order = TRUE)
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 8,
height = 4
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 1.5),
sets = rev(stages), keep.order = TRUE)
dev.off()
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.3, 1.3, 1, 1, 2, 1.5),
sets = rev(stages), keep.order = TRUE)
dev.off()
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1.2, 1, 1, 1.5, 1),
sets = rev(stages), keep.order = TRUE)
dev.off()
?upset
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1.2, 1, 1, 1, 1),
sets = rev(stages), keep.order = TRUE)
dev.off()
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1.2, 1, 1, 1, 1),
sets = rev(stages), keep.order = TRUE)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1, 1, 1, 1),
sets = rev(stages), keep.order = TRUE)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1, 1, 1),
sets = rev(stages), keep.order = TRUE)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1, 1),
sets = rev(stages), keep.order = TRUE)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1),
sets = rev(stages), keep.order = TRUE)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 3.5, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.2),
sets = rev(stages), keep.order = TRUE)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 2,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE)
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE)
dev.off()
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE,
empty.intersections = "on")
View(consensus)
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE)
dev.off()
upset(t(as.data.frame(consensus[,c(5:12)])), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE)
upset(as.matrix(consensus[,c(5:12)]), order.by = "freq")
upset(as.matrix(t(consensus[,c(5:12)])), order.by = "freq")
upset(as.data.frame(t(consensus[,c(5:12)])), order.by = "freq")
upset(t(as.data.frame(consensus[,c(5:12)])), order.by = "freq")
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE,
nintersects = 20)
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE,
nintersects = 20)
dev.off()
head(consensus[,c(5:12)])
head(t(consensus[,c(5:12)]))
make_comb_mat(consensus[,c(5:12)])
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
make_comb_mat(consensus[,c(5:12)])
# Tweaking the plot with combination matrix
make_comb_mat(consensus[,c(5:12)])
# Tweaking the plot with combination matrix
m = make_comb_mat(consensus[,c(5:12)])
set_size(m)
# total consensus peaks per stage
colSums(consensus[c(5:12)])
upset(t(m), order.by = "freq")
t(m)
m
upset(m, order.by = "freq")
# Tweaking the plot with combination matrix
m = make_comb_mat(as.data.frame(consensus[,c(5:12)]))
set_size(m) # same as colSums
m
upset(m, order.by = "freq")
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.1),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
dev.off()
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.2),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.3),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.2, 1, 1.2, 1.2, 1.2, 1.5),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
dev.off()
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.5, 1, 1.5, 1.5, 1.5, 1.5),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.5, 1.5, 1.5, 1.5, 1.5, 1.5),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
dev.off()
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 5
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.5, 1.5, 1.5, 1.5, 1.5, 1.5),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
dev.off()
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 6
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(1.5, 1.5, 1.5, 1.5, 1.5, 1.5),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
dev.off()
# Unique per stage
png(
paste(basedir, '/upset_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 8
)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(2, 2, 2, 2, 2, 2),
sets = rev(stages), keep.order = TRUE,
nintersects = 15)
dev.off()
# total consensus peaks per stage
colSums(consensus[c(5:12)])
16571/133210
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(2, 2, 2, 2, 2, 2),
sets = rev(stages), keep.order = TRUE,
nintersects = 23)
upset(as.data.frame(consensus[,c(5:12)]), order.by = "freq",nsets = 8,point.size = 2, line.size = 1,
mainbar.y.label = "Number of peaks", sets.x.label = "Peaks per stage",
text.scale = c(2, 2, 2, 2, 2, 2),
sets = rev(stages), keep.order = TRUE)
14096/54613 # iPSC
12209/53027 # DE
3968/49789 # GT
7252/64205 # PF
5540/57195 # PE
885/30406 # EP
8261/55803 # EN
1986/38941 # BLC
mean(1986/38941,8261/55803,885/30406,5540/57195, 7252/64205, 3968/49789, 12209/53027,14096/54613 )
mean((1986/38941),(8261/55803),(885/30406),(5540/57195), (7252/64205), (3968/49789), (12209/53027),(14096/54613) )
mean(0.258107,0.2302412,0.07969632,0.1129507,0.0968616,0.0291061,0.1480386,0.05100023 )
# mean of unique peaks per stage
mean(c(0.258107,0.2302412,0.07969632,0.1129507,0.0968616,0.0291061,0.1480386,0.05100023 ))
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
# Peak annotations
peakAnnoConsensus <- annotatePeak(GRanges(consensus), tssRegion=c(-3000, 3000),
TxDb=txdb, annoDb="org.Hs.eg.db")
library(ChIPseeker)
# Peak annotations
peakAnnoConsensus <- annotatePeak(GRanges(consensus), tssRegion=c(-2000, 500),
TxDb=txdb, annoDb="org.Hs.eg.db")
# Peak annotations
peakAnnoConsensus <- annotatePeak(GRanges(as.data.frame(consensus)), tssRegion=c(-2000, 500),
TxDb=txdb, annoDb="org.Hs.eg.db")
install.packages("org.Hs.eg.db")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
# Peak genomic annotations
peakAnnoConsensus <- annotatePeak(GRanges(as.data.frame(consensus)), tssRegion=c(-2000, 500),
TxDb=txdb, annoDb="org.Hs.eg.db")
plotAnnoPie(peakAnnoConsensus)
plotDistToTSS(peakAnnoConsensus,
title="Distribution of ATAC-seq peaks relative to TSS")
consensus = as.data.frame(consensus)
consensus_per_stage = list()
consensus = as.data.frame(consensus)
for (s in stage) {
subset_c = consensus[,c("Name","Chr","Start","End",s)]
consensus_per_stage[[s]] = subset_c[subset_c[s]==1,]
consensus_per_stage[[s]] = consensus_per_stage[[s]]
}
for (s in stages) {
subset_c = consensus[,c("Name","Chr","Start","End",s)]
consensus_per_stage[[s]] = subset_c[subset_c[s]==1,]
consensus_per_stage[[s]] = consensus_per_stage[[s]]
}
consensus_per_stage_GRL = GRangesList(consensus_per_stage)
for (s in stages) {
subset_c = consensus[,c("Name","Chr","Start","End",s)]
consensus_per_stage[[s]] = subset_c[subset_c[s]==1,]
consensus_per_stage[[s]] = GRanges(consensus_per_stage[[s]])
}
consensus_per_stage_GRL = GRangesList(consensus_per_stage)
consensus_per_stage_GRL
s="iPSC"
consensus_per_stage = list()
consensus = as.data.frame(consensus)
subset_c = consensus[,c("Name","Chr","Start","End",s)]
head(subset_c)
subset_c[s]==1
subset_c[subset_c[s]==1,]
consensus_per_stage[[s]] = subset_c[subset_c[s]==1,]
consensus_per_stage[[s]] = GRanges(consensus_per_stage[[s]])
consensus_per_stage$iPSC
consensus_per_stage = list()
consensus = as.data.frame(consensus)
for (s in stages) {
subset_c = consensus[,c("Name","Chr","Start","End",s)]
consensus_per_stage[[s]] = subset_c[subset_c[s]==1,]
consensus_per_stage[[s]] = GRanges(consensus_per_stage[[s]])
}
consensus_per_stage_GRL = GRangesList(consensus_per_stage)
consensus_per_stage_GRL
peakAnnoList <- lapply(consensus_per_stage_GRL, annotatePeak, TxDb=txdb,
tssRegion=c(-2000, 500), verbose=FALSE)
plotAnnoBar(peakAnnoList, title = "ATAC-seq peaks distribution")
plotDistToTSS(peakAnnoList,
title="Distribution of ATAC-seq peaks relative to TSS")
peakAnnoList <- lapply(consensus_per_stage_GRL, annotatePeak, TxDb=txdb,
tssRegion=c(-500, 500), verbose=FALSE)
plotAnnoBar(peakAnnoList, title = "ATAC-seq peaks distribution")
plotDistToTSS(peakAnnoList,
title="Distribution of ATAC-seq peaks relative to TSS")
png(
paste(basedir, '/GenomicAnnotationBar_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 8
)
plotAnnoBar(peakAnnoList, title = "Distribution of ATAC-seq peaks relative to genomic features")
dev.off()
png(
paste(basedir, '/TSSDistancenBar_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 12,
height = 8
)
plotDistToTSS(peakAnnoList,
title="Distribution of ATAC-seq peaks relative to TSS")
dev.off()
png(
paste(basedir, '/GenomicAnnotationBar_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 8,
height = 6
)
plotAnnoBar(peakAnnoList, title = "Distribution of ATAC-seq peaks relative to genomic features")
dev.off()
png(
paste(basedir, '/TSSDistancenBar_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 8,
height = 6
)
plotDistToTSS(peakAnnoList,
title="Distribution of ATAC-seq peaks relative to TSS")
dev.off()
png(
paste(basedir, '/GenomicAnnotationBar_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 6,
height = 6
)
plotAnnoBar(peakAnnoList, title = "Distribution of ATAC-seq peaks relative to genomic features")
dev.off()
png(
paste(basedir, '/TSSDistancenBar_consensus_set.png', sep = ''),units = "in",res = 400,type = "cairo",
width = 6,
height = 6
)
plotDistToTSS(peakAnnoList,
title="Distribution of ATAC-seq peaks relative to TSS")
dev.off()
