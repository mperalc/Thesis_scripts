DMRs <- dmrcate(myAnnotation, lambda=1000, C=2, min.cpgs = 7, mc.cores = 6)
DMRs <- dmrcate(myAnnotation, lambda=1000, C=2, min.cpgs = 7)
results.ranges <- extractRanges(DMRs, genome = "hg19")
# set up the grouping variables and colours
pal <- brewer.pal(9,"Set1")
groups <- pal[1:length(unique(pD$stage))]
names(groups) <- levels(factor(pD$stage))
cols <- groups[as.character(factor(pD$stage))]
samps <- 1:nrow(pD)
# draw the plot for the top DMR
DMR.plot(ranges=results.ranges, dmr=1, CpGs=as.matrix(beta),
phen.col=cols,
what = "Beta",
arraytype = "EPIC",
pch=16, toscale=TRUE, plotmedians=TRUE,
genome="hg19")
head(results.ranges)
?cpg.annotate
?dmrcate
head(DMRs$results)
head(results.ranges)
DMRs$results
View(results.ranges)
test = as.data.frame(results.ranges)
View(test)
# draw the plot for the top DMR
DMR.plot(ranges=results.ranges, dmr=7, CpGs=as.matrix(beta),
phen.col=cols,
what = "Beta",
arraytype = "EPIC",
pch=16, toscale=TRUE, plotmedians=TRUE,
genome="hg19")
# draw the plot for the top DMR
DMR.plot(ranges=results.ranges, dmr=14, CpGs=as.matrix(beta),
phen.col=cols,
what = "Beta",
arraytype = "EPIC",
pch=16, toscale=TRUE, plotmedians=TRUE,
genome="hg19")
contMatrix
myAnnotation <- cpg.annotate(object = as.matrix(m), datatype = "array", what = "M",
analysis.type = "differential", design = design,
contrasts = TRUE, cont.matrix = contMatrix,
coef = "islet - BLC", arraytype = "EPIC")
DMRs <- dmrcate(myAnnotation, lambda=1000, C=2, min.cpgs = 7)
head(DMRs$results)
# As for the probe-wise analysis, it is advisable to visualise the results to ensure that they make sense.
# The regions can easily be viewed using the DMR.plot function provided in the DMRcate package
data(dmrcatedata)
results.ranges <- extractRanges(DMRs, genome = "hg19")
# set up the grouping variables and colours
pal <- brewer.pal(9,"Set1")
groups <- pal[1:length(unique(pD$stage))]
names(groups) <- levels(factor(pD$stage))
cols <- groups[as.character(factor(pD$stage))]
samps <- 1:nrow(pD)
results_df = results.ranges
results_df = as.data.frame(results.ranges)
View(results_df)
# draw the plot for the top DMR
DMR.plot(ranges=results.ranges, dmr=1, CpGs=as.matrix(beta),
phen.col=cols,
what = "Beta",
arraytype = "EPIC",
pch=16, toscale=TRUE, plotmedians=TRUE,
genome="hg19")
for(c in colnames(contMatrix)) {
myAnnotation <- cpg.annotate(object = as.matrix(m), datatype = "array", what = "M",
analysis.type = "differential", design = design,
contrasts = TRUE, cont.matrix = contMatrix,
coef = "islet - BLC", arraytype = "EPIC")
# Once we have the relevant statistics for the individual CpGs, we can then use the dmrcate function to combine them to
# identify differentially methylated regions.
# The main output table DMRs$results contains all of the regions found, along with their genomic annotations and p-values.
DMRs <- dmrcate(myAnnotation, lambda=1000, C=2, min.cpgs = 7)
# As for the probe-wise analysis, it is advisable to visualise the results to ensure that they make sense.
# The regions can easily be viewed using the DMR.plot function provided in the DMRcate package
results.ranges <- extractRanges(DMRs, genome = "hg19")
results_df = as.data.frame(results.ranges)
write.csv(results_df[results_df$meanbetafc>0,], file=paste(outFolder,name,"_DMRs_hypermethylated.csv",sep=""), row.names=FALSE)
write.csv(results_df[results_df$meanbetafc<0,], file=paste(outFolder,name,"_DMRs_hypomethylated.csv",sep=""), row.names=FALSE)
}
for(c in colnames(contMatrix)) {
myAnnotation <- cpg.annotate(object = as.matrix(m), datatype = "array", what = "M",
analysis.type = "differential", design = design,
contrasts = TRUE, cont.matrix = contMatrix,
coef = "islet - BLC", arraytype = "EPIC")
# Once we have the relevant statistics for the individual CpGs, we can then use the dmrcate function to combine them to
# identify differentially methylated regions.
# The main output table DMRs$results contains all of the regions found, along with their genomic annotations and p-values.
DMRs <- dmrcate(myAnnotation, lambda=1000, C=2, min.cpgs = 7)
# As for the probe-wise analysis, it is advisable to visualise the results to ensure that they make sense.
# The regions can easily be viewed using the DMR.plot function provided in the DMRcate package
results.ranges <- extractRanges(DMRs, genome = "hg19")
results_df = as.data.frame(results.ranges)
write.csv(results_df[results_df$meanbetafc>0,], file=paste(outFolder,c,"_DMRs_hypermethylated.csv",sep=""), row.names=FALSE)
write.csv(results_df[results_df$meanbetafc<0,], file=paste(outFolder,c,"_DMRs_hypomethylated.csv",sep=""), row.names=FALSE)
}
?cpg.annotate
for(c in colnames(contMatrix)) {
myAnnotation <- cpg.annotate(object = as.matrix(m), datatype = "array", what = "M",
analysis.type = "differential", design = design,
contrasts = TRUE, cont.matrix = contMatrix,
coef = c, arraytype = "EPIC",fdr = 0.01  )
# Once we have the relevant statistics for the individual CpGs, we can then use the dmrcate function to combine them to
# identify differentially methylated regions.
# The main output table DMRs$results contains all of the regions found, along with their genomic annotations and p-values.
DMRs <- dmrcate(myAnnotation, lambda=1000, C=2, min.cpgs = 7)
# As for the probe-wise analysis, it is advisable to visualise the results to ensure that they make sense.
# The regions can easily be viewed using the DMR.plot function provided in the DMRcate package
results.ranges <- extractRanges(DMRs, genome = "hg19")
results_df = as.data.frame(results.ranges)
write.csv(results_df[results_df$meanbetafc>0,], file=paste(outFolder,c,"_DMRs_hypermethylated.csv",sep=""), row.names=FALSE)
write.csv(results_df[results_df$meanbetafc<0,], file=paste(outFolder,c,"_DMRs_hypomethylated.csv",sep=""), row.names=FALSE)
}
# differential methylation analysis based on limma (DMP) and DMRcate (DMR), following methylationArrayAnalysis vignette
# load packages required for analysis
library(knitr)
library(limma)
library(minfi)
library(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
library(IlluminaHumanMethylationEPICmanifest)
library(RColorBrewer)
library(missMethyl)
library(minfiData)
library(Gviz)
library(DMRcate)
library(stringr)
data(dmrcatedata)
### initial parameters
inFolder = "/Users/Marta/Documents/WTCHG/DPhil/Data/Regulation/Methylation/"
outFolder = "/Users/Marta/Documents/WTCHG/DPhil/Data/Results/Methylation/"
coreNum = 8 # Number of cores to use
sample_type="islets"   # Analyze islets or differentiated cells ("diff")
###
# load matrix of normalized beta values
beta= read.csv(paste(inFolder,"quantile_normalised_beta_detP_0.01_nocrossreact.csv",sep=""), header=T,row.names = 1,check.names=F)
# load matrix of normalized M values
m = read.csv(paste(inFolder,"quantile_normalised_M_detP_0.01_nocrossreact.csv",sep=""), header=T,row.names = 1,check.names=F)
# load matrix with sample information
pD=read.csv(paste(inFolder,"samples_info.csv",sep=""), header=T)
# get the latest EPIC annotation data
annEPIC <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
stages=c("iPSC","DE","GT","PF","PE","EP","EN","BLC")
islets=colnames(beta)[22:32]  # islets names
### differentially methylated probes (DMP)  ############
# create the design matrix, which contains the comparisons I want to make
# this is the factor of interest
stage <- pD$stage
# this is the individual effect that we need to account for
sample <- as.character(pD$sample)
## change R for ISL because otherwise  eBayes fails
sample[sample=="R"] = "ISL"
sample = factor(sample,levels = unique(sample))
pD_modified = pD[c("stage","sample")]
pD_modified[pD_modified$sample=="R","sample"] = "ISL"
pD_modified$sample = factor(pD_modified$sample,levels = unique(pD_modified$sample))
# use the above to create a design matrix
design <- model.matrix(~0+stage+sample, data=pD_modified)
colnames(design) <- c(levels(stage),levels(sample)[-1])
# fit the linear model
fit <- lmFit(m, design)
# create a contrast matrix for specific comparisons
contMatrix <- makeContrasts(DE-iPSC,
GT-iPSC,
PF-iPSC,
PE-iPSC,
EP-iPSC,
EN-iPSC,
BLC-iPSC,
islet-BLC,
levels=design)
contMatrix
# fit the contrasts
fit2 <- contrasts.fit(fit, contMatrix)
fit2 <- eBayes(fit2)
# look at the numbers of DM CpGs at FDR < 0.05
summary(decideTests(fit2))
## results for every contrast
DMPs = list()
for(n in 1:8) {
DMPs[[n]] =  topTable(
fit2,
number = Inf,
coef = n,
sort.by = "p"
)
DMPs[[n]] = DMPs[[n]][abs(DMPs[[n]]$logFC)>1 & DMPs[[n]]$adj.P.Val<0.01,]
DMPs[[n]]$CpG = rownames(DMPs[[n]])
}
names(DMPs) = colnames(contMatrix)
for (name in names(DMPs)){
# distinguish between increase or decrease in methylation
# write.csv(DMPs[[name]][DMPs[[name]]$logFC>0,], file=paste(outFolder,name,"_DMPs_hypermethylated.csv",sep=""), row.names=FALSE)
# write.csv(DMPs[[name]][DMPs[[name]]$logFC<0,], file=paste(outFolder,name,"_DMPs_hypomethylated.csv",sep=""), row.names=FALSE)
}
### GSEA
sigCpGs = DMPs[["BLC - iPSC"]]$Name
### GSEA
sigCpGs = DMPs[["BLC-iPSC"]]$Name
head(DMPs$`BLC - iPSC`)
### GSEA
sigCpGs = DMPs[["BLC-iPSC"]]$CpG
### GSEA
sigCpGs = DMPs[["BLC - iPSC"]]$CpG
# Get all the CpG sites used in the analysis to form the background
all <- rownames(m)
head(all)
# Total number of CpG sites tested
length(all)
gst <- gometh(sig.cpg=sigCpGs, all.cpg=all, plot.bias=TRUE)
# Top 10 GO categories
topGSA(gst, number=10)
View(gst)
length(sigCpGs)
head(DMPs[["BLC - iPSC"]])
tail(DMPs[["BLC - iPSC"]])
names(DMPs)
sigCpGs = DMPs[["islet - BLC"]]$CpG
# Get all the CpG sites used in the analysis to form the background
all <- rownames(m)
# The genes that have more CpGs associated with them will have a higher probability of being identified as differentially methylated
# compared to genes with fewer CpGs. We can look at this bias in the data by specifying plot=TRUE
gst <- gometh(sig.cpg=sigCpGs, all.cpg=all, plot.bias=TRUE)
# Top 10 GO categories
topGSA(gst, number=10)
n="islet - BLC"
sigCpGs_hyper = DMPs[[n]][DMPs[[n]]$logFC>0,"CpG"]
sigCpGs_hypo = DMPs[[n]][DMPs[[n]]$logFC<0,"CpG"]
# Get all the CpG sites used in the analysis to form the background
all <- rownames(m)
gst_hyper <- gometh(sig.cpg=sigCpGs_hyper, all.cpg=all, plot.bias=TRUE)
gst_hypo <- gometh(sig.cpg=sigCpGs_hypo, all.cpg=all, plot.bias=TRUE)
topGSA(gst_hyper,number = 10)
topGSA(gst_hypo,number = 10)
n
head(DMPs$`islet - BLC`)
m["cg26297819",]
head(gst_hyper)
topGSA(gst_hyper,number = 20)
### Gene ontology
for(n in names(DMPs)){
sigCpGs_hyper = DMPs[[n]][DMPs[[n]]$logFC>0,"CpG"]
sigCpGs_hypo = DMPs[[n]][DMPs[[n]]$logFC<0,"CpG"]
# Get all the CpG sites used in the analysis to form the background
all <- rownames(m)
# The genes that have more CpGs associated with them will have a higher probability of being identified as differentially methylated
# compared to genes with fewer CpGs. We can look at this bias in the data by specifying plot=TRUE
gst_hyper <- gometh(sig.cpg=sigCpGs_hyper, all.cpg=all, plot.bias=TRUE)
gst_hypo <- gometh(sig.cpg=sigCpGs_hypo, all.cpg=all, plot.bias=TRUE)
write.csv(gst_hyper, file=paste(outFolder,n,"_DMPs_GO_hypermethylated.csv",sep=""), row.names=TRUE)
write.csv(gst_hypo, file=paste(outFolder,n,"_DMPs_GO_hypomethylated.csv",sep=""), row.names=TRUE)
}
library(RColorBrewer)
library(minfi)
library(ENmix)
library(GEOquery)
library(wateRmelon) # for BMIQ normalization
library(preprocessCore)  # different normalization functions
library(IlluminaHumanMethylationEPICmanifest)
library(ggplot2)
library(reshape2)
library(pheatmap)
library(ChAMP)
currentDate <- Sys.Date() # to save date in name of output files
`%notin%` <- function(x,y) !(x %in% y)
# Read IDAT files
baseDir = "/Users/Marta/Documents/WTCHG/DPhil/Data/Regulation/Methylation/P160281_MethylationEPIC_NicolaBeer/03.archive/P160281_MethylationEPIC_NicolaBeer.all.tar"
sheet = read.metharray.sheet(base="/Users/Marta/Documents/WTCHG/DPhil/Data/Regulation/Methylation/P160281_MethylationEPIC_NicolaBeer/03.archive/3.Results", recursive = F)
# add stage column
sheet$stage= c("iPSC","iPSC","iPSC","DE","DE","DE","GT","GT","GT","PF","PF","PF","PE","PE","PE","EP","EN","EN","EN","BLC","BLC","islet","islet","islet","islet","islet","islet","islet","islet","islet","islet","islet")
# add sample column
sheet$sample=c("SBNeo1.1","SBAd2.1","SBAd3.1","SBNeo1.1","SBAd2.1","SBAd3.1","SBNeo1.1","SBAd2.1","SBAd3.1","SBNeo1.1","SBAd2.1","SBAd3.1","SBNeo1.1","SBAd2.1","SBAd3.1","SBAd3.1","SBNeo1.1","SBAd2.1","SBAd3.1","SBNeo1.1","SBAd3.1","ISL","ISL","ISL","ISL","ISL","ISL","R","R","R","R","R")
sheet$Sample_Name=gsub( "^.*?_", "", sheet$Sample_Name) # take out stage part of experiment id (sample name)
sheet$simple_id = paste(
c(
"iPSC", "iPSC",  "iPSC",
"DE",   "DE",   "DE",
"GT",   "GT",   "GT",
"PF",   "PF",   "PF",
"PE",   "PE",   "PE",
"EP",   "EN",   "EN",   "EN",
"BLC",  "BLC",
"124I",    "141 (14-19)",    "177",    "179",    "182",    "184",    "124R",    "136",    "137",    "138",    "139"  ),
sheet$sample,
sep = "-"
)
rownames(sheet) <- sheet$Sample_Name # add that as rownames
sheet$Basename <- file.path(baseDir, sub("_.*", "", sheet$Sample_Name),sheet$Sample_Name)
#read cross-reactive probes
cross_reactive_EPIC <- read.csv("/Users/Marta/Documents/WTCHG/DPhil/Data/Regulation/Methylation/cross-reactive_probes_Pidsley_2016/EPIC_cross_reactive_probes.csv",sep=";")
rgSet <- read.metharray.exp(targets = sheet) # Reads an entire methylation array experiment
rgSet
# assayData: 1052641 features, 32 samples
# array: IlluminaHumanMethylationEPIC
# annotation: ilm10b2.hg19
head(sampleNames(rgSet)) # we see the samples are named following a standard IDAT naming convention with a 10 digit number
rgSet <- rgSet[,sheet$Sample_Name] # reordering before merging
#pData(rgSet) <- pD  # merging into pheno data of rgSet
pData(rgSet) <- as(sheet, "DataFrame") # merging into pheno data of rgSet
rgSet
# give more descriptive names to our samples:
sampleNames(rgSet) <- sheet$simple_id
############ probes QC  ####################
# transform to methylset
mraw <- preprocessRaw(rgSet) #  A MethylSet object contains only the methylated and unmethylated signals.
##########modifying multifreqpoly###########
bincount <- function(x,breaks){
x <- x[!is.na(x)]
bc <- table(.bincode(x, breaks, TRUE, TRUE))
temp=data.frame(id=c(1: (length(breaks)-1)))
bc=data.frame(id=as.numeric(names(bc)),counts=as.numeric(bc))
resu=merge(temp,bc,by="id",all.x=TRUE)
resu$counts[is.na(resu$counts)]=0
resu$counts[order(resu$id)]
}
# multifreqpoly <- function(mat, nbreaks=100, col=1:ncol(mat), xlab="",
#                           ylab="Frequency", legend = list(x = "topright", fill=col,inset=c(-0.2,0),cex=0.6,
#                                                           legend = if(is.null(colnames(mat))) paste(1:ncol(mat)) else
#                                                             colnames(mat)),...)
# {
#   if(!is.matrix(mat)) stop("Warning: input data is not a numeric matrix\n")
#   if(is.null(col)) col="black"
#   col=rep(col,ceiling(ncol(mat)/length(col)))
#   if(nbreaks > nrow(mat)) nbreaks=min(15,round(nrow(mat)/2))
#
#   breaks <- seq(min(mat,na.rm=TRUE), max(mat,na.rm=TRUE),
#                 diff(range(mat,na.rm=TRUE))/nbreaks)
#   mids <- 0.5 * (breaks[-1] + breaks[-length(breaks)])
#   counts <- sapply(data.frame(mat),bincount,breaks=breaks)
#   plot(range(mids),c(0,max(counts)),type="n",xlab=xlab,ylab=ylab,...)
#   for(i in 1:ncol(counts)){lines(mids,counts[,i],col=col[i],...)}
#   if(is.list(legend)) do.call(graphics::legend, legend)
# }
multifreqpoly <- function(mat, nbreaks=100, col=1:ncol(mat), xlab="Beta", renaming_sheet=sheet,
ylab="Frequency", main = "multifreqpoly", legend = TRUE,...)
{
if(!is.matrix(mat)) stop("Warning: input data is not a numeric matrix\n")
if(is.null(col)) col="black"
# col=rep(col,ceiling(ncol(mat)/length(col)))
if(nbreaks > nrow(mat)) nbreaks=min(15,round(nrow(mat)/2))
breaks <- seq(min(mat,na.rm=TRUE), max(mat,na.rm=TRUE),
diff(range(mat,na.rm=TRUE))/nbreaks)
mids <- 0.5 * (breaks[-1] + breaks[-length(breaks)])
counts <- sapply(data.frame(mat),bincount,breaks=breaks)
df = as.data.frame(cbind(counts,breaks[2:length(breaks)]))
# plot(range(mids),c(0,max(counts)),type="n",xlab=xlab,ylab=ylab,...)
colnames(df)=c(sheet$simple_id,"Breaks")
melted = melt(df,id.vars=rev(names(df))[1])
colnames(melted)=c("Breaks","Samples","Frequency")
# melted$Stages = sub("\\..*", "", melted$Samples)
subdf = sheet[c("simple_id","stage")]
colnames(subdf) = c("Samples","Stages")
melted$Stages = subdf[match(melted$Samples, subdf$Samples),"Stages"]
melted$Stages = factor(melted$Stages,levels = unique(melted$Stages),ordered = T)
# for(i in 1:ncol(counts)){lines(mids,counts[,i],col=col[i],...)}
# if(is.list(legend)) do.call(graphics::legend, legend)
ggplot(melted,aes(x=Breaks,y=Frequency, group = Samples, col = Stages)) +
geom_line(size=1) +
xlab(xlab) +
ggtitle(main) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, colour = "black"),
plot.title = element_text(
size = 20,
face = "bold"
),
axis.title.y = element_text(
angle = 90,
size = 18,
face = "bold"
),
axis.title.x = element_text(
size = 18,
vjust = 0,
face = "bold"
),
axis.text.x = element_text(
colour = "black",
size = 16
),
axis.text.y = element_text(colour = "black", size = 16),
legend.text = element_text(colour = "black", size = 16),
legend.title = element_text(colour = "black", size = 16, face = "bold"),
axis.ticks = element_line(colour = "black"),
axis.line = element_line(colour = "black")
)
}
#####################
#total intensity plot is userful for data quality inspection
#and identification of outlier samples
#  A RatioSet object is a class designed to store Beta values and/or M values instead of the methylated and unmethylated signals.
RSet <- ratioConvert(mraw, what = "both", keepCN = TRUE)
RSet
# Preprocessing
# Method: Raw (no normalization or bg correction)
# minfi version: 1.18.6
# Manifest version: 0.3.0
# The functions getBeta, getM and getCN return respectively the Beta value matrix, M value matrix and the Copy Number matrix.
beta <- getBeta(RSet)
beta.noQN = beta # for later
p1 = multifreqpoly(beta,main="All probes",xlab="Beta value")
anno = getProbeType(RSet)   # get the EPIC Annotation data: probe types I or II
beta1 = beta[anno == "I", ]
beta2 = beta[anno == "II", ]
p2 = multifreqpoly(beta1,main="Infinium I probes",xlab="Beta value")
p3 = multifreqpoly(beta2,main="Infinium II probes",xlab="Beta value")
GRset <- mapToGenome(RSet,mergeManifest=TRUE)
GRset
anno=getAnnotation(GRset)
# if your data includes males and females, remove probes on the sex chromosomes
discard <- intersect(featureNames(GRset), anno$Name[anno$chr %in% c("chrX","chrY")])
length(discard) # 19627
(length(discard)/length(featureNames(GRset)))*100 # to lose 16927 probes (2.3%)
probeNames <- featureNames(GRset)
discard2 <- intersect(probeNames,as.character(cross_reactive_EPIC[,1])) # keep only probes that are not cross reactive
length(discard2) # 43177
(length(discard2)/length(featureNames(GRset)))*100   #5%
discard=unique(c(discard,discard2)) # 61400
(length(discard)/length(featureNames(GRset)))*100  # 7.10% of the original probes will be lost
############################################ normalization
# QN function (Matthias')
##get detection p-values:
dp <- minfi::detectionP(rgSet, type = "m+u")
## Type II probes
TypeII.Name <- getProbeInfo(rgSet, type = "II")$Name
TypeII.Green <- getGreen(rgSet)[getProbeInfo(rgSet, type = "II")$AddressA,]
TypeII.Red <- getRed(rgSet)[getProbeInfo(rgSet, type = "II")$AddressA,]
rownames(TypeII.Red) <- TypeII.Name
colnames(TypeII.Red) <- sampleNames(rgSet)
rownames(TypeII.Green) <- TypeII.Name
colnames(TypeII.Green) <- sampleNames(rgSet)
## Type I probes, split into green and red channels
TypeI.Green.Name <- getProbeInfo(rgSet, type = "I-Green")$Name
TypeI.Green.M <- getGreen(rgSet)[getProbeInfo(rgSet, type = "I-Green")$AddressB,] # address for methylated signal=B
rownames(TypeI.Green.M) <- TypeI.Green.Name
colnames(TypeI.Green.M) <- sampleNames(rgSet)
TypeI.Green.U <- getGreen(rgSet)[getProbeInfo(rgSet, type = "I-Green")$AddressA,] # address for unmethylated signal=A. How does he know?
rownames(TypeI.Green.U) <- TypeI.Green.Name
colnames(TypeI.Green.U) <- sampleNames(rgSet)
TypeI.Red.Name <- getProbeInfo(rgSet, type = "I-Red")$Name
TypeI.Red.M <- getRed(rgSet)[getProbeInfo(rgSet, type = "I-Red")$AddressB,]
rownames(TypeI.Red.M) <- TypeI.Red.Name
colnames(TypeI.Red.M) <- sampleNames(rgSet)
TypeI.Red.U <- getRed(rgSet)[getProbeInfo(rgSet, type = "I-Red")$AddressA,]
rownames(TypeI.Red.U) <- TypeI.Red.Name
colnames(TypeI.Red.U) <- sampleNames(rgSet)
##remove high missingness probes
d = ifelse(dp<0.01,1,NA) # if p-value <0.01, make it 1. Else, make it NA.
cr = data.frame(rowSums(is.na(d))/length(d[1,])) # sums NAs in each row, then divide by nÂº of samples.
# In the end, it excludes probes with p-values above 0.01 in a min of 1 sample.
exclude.badcalls = rownames(cbind(cr,rownames(cr))[cbind(cr,rownames(cr))[,1]>0.01,])
# 4548 probes
# test=names(as.matrix(cr)[which(as.matrix(cr)[,1]>0.02),])  # does the same as exclude.badcalls
exclude.sites = unique(c(exclude.badcalls,discard))  #  4548 failed probes + previous ones = 65243
mind = data.frame(colSums(is.na(d))/length(d[,1])) # sums NAs in each column, and divides by nÂº of probes
remove.mind = rownames(cbind(mind,rownames(mind))[cbind(mind,rownames(mind))[,1]>0.01,])  # remove samples with over 1% failed probes
# test2=names(as.matrix(mind)[which(as.matrix(mind)[,1]>0.02),])  # does the same as remove.mind
# no failed samples
samples = rownames(cbind(mind,rownames(mind))[cbind(mind,rownames(mind))[,1]<0.01,])  # samples with less than 1% failed probes.
TypeII.Green =subset(TypeII.Green, select=samples)
TypeII.Red = subset(TypeII.Red, select=samples)
TypeI.Green.M = subset(TypeI.Green.M, select=samples)
TypeI.Green.U = subset(TypeI.Green.U, select=samples)
TypeI.Red.M = subset(TypeI.Red.M, select=samples)
TypeI.Red.U = subset(TypeI.Red.U, select=samples)
# Everything stays the same.
#exclude sites (filtering out failed probes)
TypeII.Green = TypeII.Green[rownames(TypeII.Green) %notin% as.matrix(exclude.sites),]
TypeII.Red = TypeII.Red[rownames(TypeII.Red) %notin% as.matrix(exclude.sites),]
TypeI.Green.M = TypeI.Green.M[rownames(TypeI.Green.M) %notin% as.matrix(exclude.sites),]
TypeI.Green.U = TypeI.Green.U[rownames(TypeI.Green.U) %notin% as.matrix(exclude.sites),]
TypeI.Red.M = TypeI.Red.M[rownames(TypeI.Red.M) %notin% as.matrix(exclude.sites),]
TypeI.Red.U = TypeI.Red.U[rownames(TypeI.Red.U) %notin% as.matrix(exclude.sites),]
# normalizing using quantiles
TypeII.Red.norm=normalize.quantiles(TypeII.Red)
TypeII.Green.norm=normalize.quantiles(TypeII.Green)
TypeI.Green.M.norm=normalize.quantiles(TypeI.Green.M)
TypeI.Green.U.norm=normalize.quantiles(TypeI.Green.U)
TypeI.Red.M.norm=normalize.quantiles(TypeI.Red.M)
TypeI.Red.U.norm=normalize.quantiles(TypeI.Red.U)
#rm(TypeII.Red,TypeII.Green,TypeI.Green.M,TypeI.Green.U,TypeI.Red.M,TypeI.Red.U)
#calculate betas
TypeII.betas = TypeII.Green.norm/(TypeII.Red.norm+TypeII.Green.norm+100)
rownames(TypeII.betas)=rownames(TypeII.Green)
colnames(TypeII.betas)=colnames(TypeII.Green)
TypeI.Green.betas = TypeI.Green.M.norm/(TypeI.Green.M.norm+TypeI.Green.U.norm+100)
rownames(TypeI.Green.betas)=rownames(TypeI.Green.M)
colnames(TypeI.Green.betas)=colnames(TypeI.Green.M)
TypeI.Red.betas = TypeI.Red.M.norm/(TypeI.Red.M.norm+TypeI.Red.U.norm+100)
rownames(TypeI.Red.betas)=rownames(TypeI.Red.M)
colnames(TypeI.Red.betas)=colnames(TypeI.Red.M)
beta=rbind(TypeII.betas,TypeI.Green.betas,TypeI.Red.betas)
beta <- as.matrix(beta)
rm(TypeII.Red,TypeII.Green,TypeI.Green.M,TypeI.Green.U,TypeI.Red.M,TypeI.Red.U)
dim(beta)
?getM
# For PCA and other analyses
m=log2(beta/(1-beta))    #M=log2(Beta/(1-Beta))
multifreqpoly(m,main="M values after filtering and normalization",xlab="M value",legend=F)
jpeg("multifreq_plots_M_and_beta_values_comparison.jpg",height=9,width=9,units = "in",res = 600,type = "cairo")
p1 = multifreqpoly(beta,main="M values after filtering and normalization",xlab="Beta value",legend=F)
p2 = multifreqpoly(m,main="M values after filtering and normalization",xlab="M value",legend=F)
print(grid.arrange(p1, p2, nrow = 2))
dev.off()
library(gridExtra)
jpeg("multifreq_plots_M_and_beta_values_comparison.jpg",height=9,width=9,units = "in",res = 600,type = "cairo")
print(grid.arrange(p1, p2, nrow = 2))
dev.off()
